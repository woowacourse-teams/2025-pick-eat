name: Build and Deploy

on:
  pull_request:
    branches: [ "back/dev" ]

jobs:
  ci:
    runs-on: ubuntu-24.04
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SUBMODULE_KEY }}
          submodules: recursive

      - name: Update Submodule
        run: git submodule update --remote

      - name: Generate short SHA
        id: meta
        run: echo "short_sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 21
          cache: gradle

      - name: Build JAR
        working-directory: ./backend
        run: ./gradlew clean build -x test --no-daemon --build-cache

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Back Up Image For Rollback
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest || true
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:previous || true
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:previous || true

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ steps.meta.outputs.short_sha }}
          build-args: |
            SPRING_ACTIVE_PROFILE=dev

  cd:
    needs: ci
    runs-on: [ self-hosted, dev ]
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SUBMODULE_KEY }}
          submodules: true

      - name: Copy Docker Compose
        run: |
          sudo cp ./backend/docker/docker-compose.dev.yml /home/ubuntu/docker/docker-compose.yml

      - name: Deploy EC2
        run: |
          cd /home/ubuntu/docker
          docker-compose pull backend
          docker-compose up -d --build backend
          docker image prune -f

      - name: Health Check with Retry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 1
          max_attempts: 5
          retry_wait_seconds: 6
          command: |
            response=$(curl -s http://localhost:8080/actuator/health)
            status=$(echo $response | jq -r '.status')
            if [ "$status" = "UP" ]; then
              echo "Status is UP. Continuing..."
              exit 0
            else
              echo "Status is NOT UP. Response: $response"
              exit 1
            fi

      - name: Rollback if Health Check fails
        if: failure()
        run: |
          cd /home/ubuntu/docker
          echo "Health check failed. Rolling back to previous version..."
          sed -i 's/:latest/:previous/g' docker-compose.yml
          docker-compose up -d --build backend
          echo "Rollback completed using previous image"

      - name: Update latest tag after successful rollback
        if: failure() # 롤백이 실행된 경우 (헬스체크 실패 시)
        run: |
          echo "Updating latest tag to match rolled back version..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:previous
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:previous ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          echo "Latest tag updated to match rollback version"

      - name: Confirm successful deployment
        if: success() # 정상 배포가 성공한 경우
        run: |
          echo "Deployment successful. Latest tag correctly points to new version."

      - name: Check Docker Process
        if: always()
        run: |
          echo "=== Docker Compose Status ==="
          cd /home/ubuntu/docker && docker-compose ps
          echo "=== All Docker Processes ==="
          docker ps
