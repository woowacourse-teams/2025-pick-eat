name: Build and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  ci:
    runs-on: ubuntu-24.04
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SUBMODULE_KEY }}
          submodules: recursive

      - name: Update Submodule
        run: git submodule update --remote

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 21
          cache: gradle

      - name: Build JAR
        working-directory: ./backend
        run: ./gradlew clean build -x test --no-daemon --build-cache

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:release
          build-args: |
            SPRING_ACTIVE_PROFILE=prod

  cd:
    needs: ci
    runs-on: [ self-hosted, prod ]
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SUBMODULE_KEY }}
          submodules: true

      - name: Copy Docker Compose
        run: |
          sudo cp ./backend/docker/docker-compose.prod.yml /home/ubuntu/docker/docker-compose.yml

      - name: Backup DB Data
        run: |
          if [ -f "/home/ubuntu/docker/backup_db.sh" ]; then
            chmod +x /home/ubuntu/docker/backup_db.sh
            /home/ubuntu/docker/backup_db.sh
          else
            echo "‚ö†Ô∏è backup_db.sh not found, skipping backup"
          fi
        continue-on-error: true

      - name: Backup Current Image Before Deploy
        run: |
          CURRENT_IMAGE=$(docker inspect docker-backend-1 --format='{{.Config.Image}}' 2>/dev/null || echo "none")
          echo "Current running image: $CURRENT_IMAGE"

          if [ "$CURRENT_IMAGE" != "none" ]; then
            docker tag "$CURRENT_IMAGE" ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:pre-release || true
            docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:pre-release || true
            echo "‚úÖ Backed up current running image as pre-release"
          else
            echo "‚ö†Ô∏è No running container found"
          fi

      - name: Deploy EC2
        run: |
          cd /home/ubuntu/docker
          docker-compose pull backend
          docker-compose up -d --build backend
          docker image prune -f

      - name: Health Check with Retry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 10
          retry_wait_seconds: 6
          command: |
            response=$(curl -s http://localhost:8080/actuator/health)
            status=$(echo $response | jq -r '.status' 2>/dev/null || echo "DOWN")
            if [ "$status" = "UP" ]; then
              echo "‚úÖ Status is UP. Continuing..."
              exit 0
            else
              echo "‚è≥ Status is NOT UP. Response: $response"
              exit 1
            fi

      - name: Rollback if Health Check fails
        if: failure()
        run: |
          cd /home/ubuntu/docker
          echo "üö® Health check failed. Rolling back to pre-release version..."
          sed -i 's/pickeat\/pickeat:release/pickeat\/pickeat:pre-release/g' docker-compose.yml
          docker-compose up -d --build backend
          echo "‚úÖ Rollback completed using pre-release image"

      - name: Update release tag after successful rollback
        if: failure()
        run: |
          echo "‚è≥ Updating release tag to match rolled back version..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:pre-release
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:pre-release ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:release
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:release
          echo "‚úÖ Release tag updated to match rollback version"

      - name: Check Docker Process
        if: always()
        run: |
          echo "=== Docker Compose Status ==="
          cd /home/ubuntu/docker && docker-compose ps
          echo "=== All Docker Processes ==="
          docker ps
          docker image prune -f
