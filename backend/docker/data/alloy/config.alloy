logging {
  level  = "info"
  format = "logfmt"
}

local.file_match "spring_logs" {
  path_targets = [
    { __path__ = "/var/log/spring/blue/*.log" },
    { __path__ = "/var/log/spring/green/*.log" },
  ]
}

loki.source.file "spring_source" {
  targets = local.file_match.spring_logs.targets
  forward_to = [loki.process.spring_labels.receiver]
}

loki.process "spring_labels" {
  forward_to = [loki.write.grafana_loki.receiver]

  stage.static_labels {
    values = {
      service = "pickeat",
      env = sys.env("ALLOY_ENV"),
    }
  }

  stage.multiline {
    firstline = "^\\[\\d{4}-\\d{2}-\\d{2}"
    max_wait_time = "3s"
  }
}

loki.source.file "nginx_access_logs" {
  targets = [
    {
      __path__ = "/var/log/nginx/access.log",
      job      = "nginx-access",
      service  = "nginx",
      logtype  = "access",
    },
  ]
  forward_to = [loki.process.nginx_access.receiver]
}

loki.process "nginx_access" {
  forward_to = [loki.write.grafana_loki.receiver]

  stage.static_labels {
    values = {
      job     = "nginx-docker",
      service = "nginx",
      logtype = "access",
    }
  }
}

loki.source.file "nginx_error_logs" {
  targets = [
    {
      __path__ = "/var/log/nginx/error.log",
      job      = "nginx-error",
      service  = "nginx",
      logtype  = "error",
    },
  ]
  forward_to = [loki.process.nginx_error.receiver]
}

loki.process "nginx_error" {
  forward_to = [loki.write.grafana_loki.receiver]

  stage.multiline {
    firstline = "^[0-9]{4}/[0-9]{2}/[0-9]{2}"
    max_lines = 50
  }

  stage.static_labels {
    values = {
      job     = "nginx-docker",
      service = "nginx",
      logtype = "error",
    }
  }
}

loki.write "grafana_loki" {
  endpoint {
    url = "https://monitoring.pickeat.io.kr/loki/loki/api/v1/push"
    tenant_id = "pickeat-dev"
    batch_wait = "2s"
    batch_size = "512KB"
  }
}
